from random import random
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.core.image import Image
from kivy.graphics import *
from kivy.core.window import Window
from kivy.uix.popup import Popup
from kivy.uix.textinput import TextInput

parent = None


class P(Widget):
    pass


class MyPaintWidget(Widget):
    freehand = True
    d = 2
    line = False
    line_diameter = 1
    rectangle = False
    rectangle_border = 1
    erase = False
    erase_size = 2
    circle = False
    circle_border = 1
    line_points = []
    circle_points = []
    rect_points = []
    color = (random(), 1, 1)
    erasing = False
    texture = False

    def on_touch_down(self, touch):
        with self.canvas:
            if self.texture:
                Rectangle(texture=self.texture, pos=self.pos, size=Window.size)
            if self.freehand:
                if self.color == (0, 0, 0):
                    self.color = (random(), 1, 1)
                Color(*self.color, mode='hsv')
                Ellipse(pos=(touch.x - self.d / 2, touch.y - self.d / 2), size=(self.d, self.d))
                touch.ud['line'] = Line(points=(touch.x, touch.y), width=self.d)
            if self.line:
                if self.color == (0, 0, 0):
                    self.color = (random(), 1, 1)
                Color(*self.color, mode='hsv')
                self.line_points.insert(len(self.line_points), touch.x)
                self.line_points.insert(len(self.line_points), touch.y)
                if len(self.line_points) == 4:
                    Line(points=[self.line_points[0], self.line_points[1], self.line_points[2],
                                 self.line_points[3]], width=self.line_diameter)
                    self.line_points[0] = self.line_points[2]
                    self.line_points[1] = self.line_points[3]
                    del self.line_points[2]
                    del self.line_points[2]
            if self.rectangle:
                if self.color == (0, 0, 0):
                    self.color = (random(), 1, 1)
                Color(*self.color, mode='hsv')
                self.rect_points.insert(len(self.rect_points), touch.x)
                self.rect_points.insert(len(self.rect_points), touch.y)
                if len(self.rect_points) == 4:
                    Line(rectangle=(self.rect_points[0], self.rect_points[1], self.rect_points[2] - self.rect_points[0],
                                    self.rect_points[3] - self.rect_points[1]), width=self.rectangle_border)
                    self.rect_points = []
            if self.circle:
                if self.color == (0, 0, 0):
                    self.color = (random(), 1, 1)
                Color(*self.color, mode='hsv')
                self.circle_points.insert(len(self.circle_points), touch.x)
                self.circle_points.insert(len(self.circle_points), touch.y)
                if len(self.circle_points) == 4:
                    Line(circle=(self.circle_points[0], self.circle_points[1], self.circle_points[2]-self.circle_points[0]),
                         width=self.circle_border)
                    self.circle_points = []
            if self.erase:
                self.color = (0, 0, 0)
                Color(*self.color, mode='hsv')
                Ellipse(pos=(touch.x - self.erase_size / 2, touch.y - self.erase_size / 2), size=(self.erase_size,
                                                                                                  self.erase_size))
                touch.ud['line'] = Line(points=(touch.x, touch.y), width=self.erase_size)

    def on_touch_move(self, touch):
        if self.freehand:
            touch.ud['line'].points += [touch.x, touch.y]
        if self.erase:
            touch.ud['line'].points += [touch.x, touch.y]


class MyPaintApp(App):

    def build(self):
        global parent
        parent = Widget()
        self.painter = MyPaintWidget()
        parent.add_widget(self.painter)
        self.clearbtn = Button(text='Clear', size=(100, 20))
        self.clearbtn.bind(on_release=self.clear_canvas)
        self.freehand_btn = Button(text='free', pos=(0, 30), size=(100, 20))
        self.freehand_btn.bind(on_release=self.free_hand)
        self.line_btn = Button(text='line', pos=(0, 60), size=(100, 20))
        self.line_btn.bind(on_release=self.draw_line)
        self.rect_btn = Button(text='rectangle', pos=(0, 90), size=(100, 20))
        self.rect_btn.bind(on_release=self.draw_rect)
        self.erase_btn = Button(text='erase', pos=(0, 120), size=(100, 20))
        self.erase_btn.bind(on_release=self.erase)
        self.circle_btn = Button(text='circle', pos=(0, 150), size=(100, 20))
        self.circle_btn.bind(on_release=self.draw_circle)
        self.increase_btn = Button(text='increase size', pos=(0, 180), size=(100, 20))
        self.increase_btn.bind(on_release=self.increase)
        self.decrease_btn = Button(text='decrease size', pos=(0, 210), size=(100, 20))
        self.decrease_btn.bind(on_release=self.decrease)
        self.save_btn = Button(text='save', pos=(0, 240), size=(100, 20))
        self.save_btn.bind(on_release=self.save_canvas)
        self.open_btn = Button(text='open', pos=(0, 270), size=(100, 20))
        self.open_btn.bind(on_release=self.open_canvas)
        self.tool_label = Label(text='TOOLS : ', pos=(0, 300), size=(100, 20))
        self.color_label = Label(text='COLORS : ', pos=(130, 0), size=(100, 20))
        self.red_btn = Button(text='', pos=(260, 0), size=(20, 20), background_color=[255, 0, 0, 1])
        self.red_btn.bind(on_release=self.color_red)
        self.blue_btn = Button(text='', pos=(310, 0), size=(20, 20), background_color=[0, 0, 255, 1])
        self.blue_btn.bind(on_release=self.color_blue)
        self.green_btn = Button(text='', pos=(360, 0), size=(20, 20), background_color=[0, 255, 0, 1])
        self.green_btn.bind(on_release=self.color_green)
        self.white_btn = Button(text='', pos=(410, 0), size=(20, 20), background_color=[255, 255, 255, 1])
        self.white_btn.bind(on_release=self.color_white)
        self.yellow_btn = Button(text='', pos=(460, 0), size=(20, 20), background_color=[255, 255, 0, 1])
        self.yellow_btn.bind(on_release=self.color_yellow)
        self.additions(parent)
        return parent

    def additions(self, obj):
        parent.add_widget(self.clearbtn)
        parent.add_widget(self.freehand_btn)
        parent.add_widget(self.line_btn)
        parent.add_widget(self.circle_btn)
        parent.add_widget(self.rect_btn)
        parent.add_widget(self.erase_btn)
        parent.add_widget(self.increase_btn)
        parent.add_widget(self.decrease_btn)
        parent.add_widget(self.save_btn)
        parent.add_widget(self.open_btn)
        parent.add_widget(self.tool_label)
        parent.add_widget(self.color_label)
        parent.add_widget(self.red_btn)
        parent.add_widget(self.blue_btn)
        parent.add_widget(self.white_btn)
        parent.add_widget(self.green_btn)
        parent.add_widget(self.yellow_btn)

    def clear_canvas(self, obj):
        self.painter.canvas.clear()
        self.painter.line_points = []

    def free_hand(self, obj):
        self.painter.freehand = True
        self.painter.line = False
        self.painter.rectangle = False
        self.painter.erase = False
        self.painter.circle = False
        if not self.painter.line:
            self.painter.line_points = []
        if not self.painter.rectangle:
            self.painter.rect_points = []
        if not self.painter.circle:
            self.painter.circle_points = []

    def draw_line(self, obj):
        self.painter.freehand = False
        self.painter.line = True
        self.painter.rectangle = False
        self.painter.erase = False
        self.painter.circle = False
        if not self.painter.line:
            self.painter.line_points = []
        if not self.painter.rectangle:
            self.painter.rect_points = []
        if not self.painter.circle:
            self.painter.circle_points = []

    def draw_rect(self, obj):
        self.painter.freehand = False
        self.painter.line = False
        self.painter.rectangle = True
        self.painter.erase = False
        self.painter.circle = False
        if not self.painter.line:
            self.painter.line_points = []
        if not self.painter.rectangle:
            self.painter.rect_points = []
        if not self.painter.circle:
            self.painter.circle_points = []

    def draw_circle(self, obj):
        self.painter.freehand = False
        self.painter.line = False
        self.painter.rectangle = False
        self.painter.erase = False
        self.painter.circle = True
        if not self.painter.line:
            self.painter.line_points = []
        if not self.painter.rectangle:
            self.painter.rect_points = []
        if not self.painter.circle:
            self.painter.circle_points = []

    def erase(self, obj):
        self.painter.freehand = False
        self.painter.line = False
        self.painter.rectangle = False
        self.painter.erase = True
        self.painter.circle = False
        if not self.painter.line:
            self.painter.line_points = []
        if not self.painter.rectangle:
            self.painter.rect_points = []
        if not self.painter.circle:
            self.painter.circle_points = []

    def increase(self, obj):
        if self.painter.freehand:
            if self.painter.d < 10:
                self.painter.d += 1
        if self.painter.line:
            if self.painter.line_diameter < 10:
                self.painter.line_diameter += 1
        if self.painter.rectangle:
            if self.painter.rectangle_border < 10:
                self.painter.rectangle_border += 1
        if self.painter.erase:
            if self.painter.erase_size < 10:
                self.painter.erase_size += 1
        if self.painter.circle:
            if self.painter.circle_border < 10:
                self.painter.circle_border += 1

    def decrease(self, obj):
        if self.painter.freehand:
            if self.painter.d > 0:
                self.painter.d -= 1
        if self.painter.line:
            if self.painter.line_diameter > 0:
                self.painter.line_diameter -= 1
        if self.painter.rectangle:
            if self.painter.rectangle_border > 0:
                self.painter.rectangle_border -= 1
        if self.painter.erase:
            if self.painter.erase_size > 0:
                self.painter.erase_size -= 1
        if self.painter.circle:
            if self.painter.circle_border > 0:
                self.painter.circle_border -= 1

    def color_red(self, obj):
        self.painter.color = (1, 1, 1)

    def color_blue(self, obj):
        self.painter.color = (0.7, 1, 1)

    def color_green(self, obj):
        self.painter.color = (0.3, 1, 1)

    def color_white(self, obj):
        self.painter.color = (0, 0, 1)

    def color_yellow(self, obj):
        self.painter.color = (0.2, 1, 1)

    def remove_all(self, obj):
        parent.remove_widget(self.clearbtn)
        parent.remove_widget(self.line_btn)
        parent.remove_widget(self.rect_btn)
        parent.remove_widget(self.freehand_btn)
        parent.remove_widget(self.circle_btn)
        parent.remove_widget(self.erase_btn)
        parent.remove_widget(self.increase_btn)
        parent.remove_widget(self.decrease_btn)
        parent.remove_widget(self.tool_label)
        parent.remove_widget(self.color_label)
        parent.remove_widget(self.red_btn)
        parent.remove_widget(self.save_btn)
        parent.remove_widget(self.open_btn)
        parent.remove_widget(self.blue_btn)
        parent.remove_widget(self.white_btn)
        parent.remove_widget(self.yellow_btn)
        parent.remove_widget(self.green_btn)

    def save_canvas(self, obj):
        global parent
        self.remove_all(parent)
        show = P()
        self.filename = ""
        show.add_widget(Label(text="Enter name of file", pos=(Window.width/2 - 20, Window.height/2 - 20)))
        self.n = TextInput(multiline=False, pos=(Window.width / 2 - 20, Window.height / 2 - 40), size=(100, 40))
        show.add_widget(self.n)
        btn = Button(text="Submit", pos=(Window.width / 2 - 20, Window.height / 2 - 140), size=(100, 40))
        show.add_widget(Label(text="If file with similar name exists, \nit will be replaced!",
                              pos=(Window.width / 2 - 20, Window.height / 2 - 80), size=(100, 40)))
        self.popupWindow = Popup(title="Save",  content=show, size=(100, 100))
        btn.bind(on_release=self.save_func)
        show.add_widget(btn)
        self.popupWindow.open()

    def save_func(self, obj):
        self.filename= self.n.text+".png"
        self.popupWindow.dismiss()
        parent.export_to_png(self.filename)
        self.additions(parent)

    def open_canvas(self, obj):
        parent.remove_widget(self.painter)
        self.painter = MyPaintWidget()
        show = P()
        self.filename = ""
        show.add_widget(Label(text="Enter name of file without extension", pos=(Window.width / 2 - 20, Window.height / 2 - 20)))
        self.n = TextInput(multiline=False, pos=(Window.width / 2 - 20, Window.height / 2 - 40), size=(100, 40))
        show.add_widget(self.n)
        btn = Button(text="Submit", pos=(Window.width / 2 - 20, Window.height / 2 - 150), size=(100, 40))
        show.add_widget(Label(text="Note: After opening, the file\nwon't be visible until you click \non the screen",
                              pos=(Window.width / 2 - 20, Window.height / 2 - 90), size=(100, 40)))
        self.popupWindow = Popup(title="Open", content=show, size=(100, 100))
        btn.bind(on_release=self.open_func)
        show.add_widget(btn)
        self.popupWindow.open()

    def open_func(self, obj):
        self.filename=self.n.text+".png"
        self.popupWindow.dismiss()
        self.painter.texture = Image(self.filename).texture
        parent.add_widget(self.painter)


if __name__ == '__main__':
    MyPaintApp().run()
